#!/usr/bin/env bash

# This prompt inspired by gf3, sindresorhus, alrra, and mathiasbynens.
# but customized to me. <3

#default_username='bradclark'
default_username=${USERNAME:-bradclark}

# ------------------------------------------------------------------
# | Debug prompt string  (when using `set -x`)                     |
# ------------------------------------------------------------------

# When debugging a shell script via `set -x` this tricked-out prompt is used.

# The first character (+) is used and repeated for stack depth
# Then, we log the current time, filename and line number, followed by function name, followed by actual source line

# FWIW, I have spent hours attempting to get time-per-command in here, but it's not possible. ~paul
PS4='+ \011\e[1;30m${EPOCHREALTIME}\011\e[1;34m${BASH_SOURCE}\e[0m:\e[1;36m${LINENO}\e[0m \011 ${FUNCNAME[0]:+\e[0;35m${FUNCNAME[0]}\e[1;30m()\e[0m:\011\011 }'
# PS4='+ \011\e[1;30m\t\011\e[1;34m${BASH_SOURCE}\e[0m:\e[1;36m${LINENO}\e[0m \011 ${FUNCNAME[0]:+\e[0;35m${FUNCNAME[0]}\e[1;30m()\e[0m:\011\011 }'

export PS4

# Automatically trim long paths in the prompt (requires Bash 4.x)
PROMPT_DIRTRIM=2

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
    export TERM=gnome-256color
elif infocmp xterm-256color >/dev/null 2>&1; then
    export TERM=xterm-256color
elif [[ $TERM = screen ]]; then
    export TERM=xterm-256color
fi

set_prompts() {
  local black="" blue="" bold="" cyan="" green="" orange="" \
      purple="" red="" reset="" white="" yellow=""

  local dateCmd=""

  if [ -x /usr/bin/tput ] && tput setaf 1 &> /dev/null; then

    tput sgr0 # Reset colors

    bold=$(tput bold)
    reset=$(tput sgr0)

    # Solarized colors
    # (https://github.com/altercation/solarized/tree/master/iterm2-colors-solarized#the-values)
    black=$(tput setaf 0)
    blue=$(tput setaf 33)
    cyan=$(tput setaf 37)
    green=$(tput setaf 190)
    orange=$(tput setaf 172)
    purple=$(tput setaf 141)
    red=$(tput setaf 124)
    violet=$(tput setaf 61)
    magenta=$(tput setaf 9)
    white=$(tput setaf 8)
    yellow=$(tput setaf 136)

  else

    bold=""
    reset="\e[0m"

    black="\e[1;30m"
    blue="\e[1;34m"
    cyan="\e[1;36m"
    green="\e[1;32m"
    orange="\e[1;33m"
    purple="\e[1;35m"
    red="\e[1;31m"
    magenta="\e[1;31m"
    violet="\e[1;35m"
    white="\e[1;37m"
    yellow="\e[1;33m"

  fi

  # Only show username/host if not default
  function usernamehost() {
    # Highlight the user name when logged in as root.
    if [[ "${USER}" == *"root" ]]; then
        userStyle="${red}";
    else
        userStyle="${magenta}";
    fi;

    userhost=""
    userhost+="\[${userStyle}\]$USER "
    userhost+="\[${white}\]at "
    userhost+="\[${orange}\]$HOSTNAME "
    userhost+="\[${white}\]in"

    if [[ $USER -ne "$default_username" ]] || [[ -n $SSH_CLIENT ]]; then echo $userhost ""; fi
  }

  function prompt_git() {
    # this is >5x faster than mathias's.

    # check if we're in a git repo. (fast)
    git rev-parse --is-inside-work-tree &>/dev/null || return

    # check for what branch we're on. (fast)
    #   if… HEAD isn’t a symbolic ref (typical branch),
    #   then… get a tracking remote branch or tag
    #   otherwise… get the short SHA for the latest commit
    #   lastly just give up.
    branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
      git describe --all --exact-match HEAD 2> /dev/null || \
      git rev-parse --short HEAD 2> /dev/null || \
      echo '(unknown)')";

    ## early exit for Chromium & Blink repo, as the dirty check takes ~5s
    ## also recommended (via goo.gl/wAVZLa ) : sudo sysctl kern.maxvnodes=$((512*1024))
    repoUrl=$(git config --get remote.origin.url)
    if grep -q chromium.googlesource.com <<<$repoUrl; then

      dirty=" ⁂"

    else

      # check if it's dirty (slow)
      #   technique via github.com/git/git/blob/355d4e173/contrib/completion/git-prompt.sh#L472-L475
      dirty=$(git diff --no-ext-diff --quiet --ignore-submodules --exit-code || echo -e "*")

      # mathias has a few more checks some may like:
      #    github.com/mathiasbynens/dotfiles/blob/a8bd0d4300/.bash_prompt#L30-L43
    fi

    [ -n "${s}" ] && s=" [${s}]";
    echo -e "${1}${branchName}${2}$dirty";

    return
  }

  # kube PS1
  if [ -f "${HOMEBREW_PREFIX}/opt/kube-ps1/share/kube-ps1.sh" ]; then
    . "${HOMEBREW_PREFIX}/opt/kube-ps1/share/kube-ps1.sh"
    export KUBE_PS1_NS_ENABLE=false
  fi

  function prompt_kube() {
    [ -f "${HOMEBREW_PREFIX}/opt/kube-ps1/share/kube-ps1.sh" ] && kube_ps1
  }

  # ------------------------------------------------------------------
  # | Prompt string                                                  |
  # ------------------------------------------------------------------

  # PS1="\[\033]0;\w\007\]"                                           # terminal title (set to the current working directory)
  # PS1+="\[$bold\]"
  # PS1+="\[$(usernamehost)\]"                                        # username at host
  # PS1+="\[$green\]\w"                                               # working directory
  # PS1+="\$(prompt_git \"\[$white\] on \[$purple\]\" \"\[$cyan\]\")" # git repository details
  # PS1+="\[$reset$white\] \$(prompt_kube)"                           # kubernetes context
  # PS1+="\n"
  # PS1+="\[$reset$white\]\\$ \[$reset\]"

  # export PS1

  # powerline-go
  function _update_ps1() {
    PS1="\[\033]0;\w\007\]"
    PS1+="$(
      "${HOMEBREW_PREFIX}/bin/powerline-go" \
        -error $? \
        -theme "solarized-dark16" \
        -jobs $(jobs -p | wc -l) \
        -hostname-only-if-ssh \
        -cwd-max-depth 2 \
        -max-width 50 \
        -git-mode simple \
        -modules "host,ssh,cwd,perms,git,terraform-workspace,kube,jobs,exit,root" \
        -path-aliases "~/code/eleanor=@ELE"
    )"

    # Uncomment the following line to automatically clear errors after showing
    # them once. This not only clears the error for powerline-go, but also for
    # everything else you run in that shell. Don't enable this if you're not
    # sure this is what you want.

    #set "?"
  }

  if [ "$TERM" != "linux" ] && [ -f "$HOMEBREW_PREFIX/bin/powerline-go" ]; then
    PROMPT_COMMAND="_update_ps1; $PROMPT_COMMAND"
  fi

  # ------------------------------------------------------------------
  # | Subshell prompt string                                         |
  # ------------------------------------------------------------------

  PS2="⚡ "

  export PS2

}

set_prompts
unset set_prompts
