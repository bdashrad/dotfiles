#!/usr/bin/env bash

function ascii2bin() {
  perl -lpe '$_=unpack"B*"';
}

function bin2ascii() {
  perl -lpe '$_=pack"B*",$_';
}

function epoch2nsca() {
  date -d @"$1" "+%d/%b/%Y:%T"
}

function epoch2human() {
  date -d @"$1"
}

function epoch2iso8601() {
  date -d @"$1" -Iseconds
}

function taskdate2epoch() {
  date -d "$1" +%s
}

# List all files, long format, colorized, permissions in octal
function la() {
  ls -l  "$@" | awk '
    {
      k=0;
      for (i=0;i<=8;i++)
        k+=((substr($1,i+2,1)~/[rwx]/) *2^(8-i));
      if (k)
        printf("%0o ",k);
      printf(" %9s  %3s %2s %5s  %6s  %s %s %s\n", $3, $6, $7, $8, $5, $9,$10, $11);
    }'
}

# cd into whatever is the forefront Finder window.
cdf() {  # short for cdfinder
  cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')"
}

# whois a domain or a URL
function whois() {
  local domain
  domain=$(echo "$1" | awk -F/ '{print $3}') # get domain from URL
  if [ -z "$domain" ] ; then
    domain=$1
  fi
  echo "Getting whois record for: $domain â€¦"

  # avoid recursion
          # this is the best whois server
                          # strip extra fluff
  /usr/bin/whois -h whois.internic.net "$domain" | sed '/NOTICE:/q'
}

function localip() {
  function _localip(){ echo "ðŸ“¶  "$(ipconfig getifaddr "$1"); }
  export -f _localip
  local purple='\x1B\[35m' reset='\x1B\[m'
  networksetup -listallhardwareports | \
    sed -r "s/Hardware Port: (.*)/${purple}\1${reset}/g" | \
    sed -r "s/Device: (en.*)$/_localip \1/e" | \
    sed -r "s/Ethernet Address:/ðŸ“˜ /g" | \
    sed -r "s/(VLAN Configurations)|==*//g"
}

# update git repo with upstream
function git_upstream_sync() {
  git fetch upstream
  git fetch upstream --tags
  git merge upstream/master
  git push origin master --tags
}

# animated gifs from any video
# from alex sexton   gist.github.com/SlexAxton/4989674
function gifify() {
  if [[ -n "$1" ]]; then
  if [[ $2 == '--good' ]]; then
    ffmpeg -i "$1" -r 10 -vcodec png out-static-%05d.png
    time convert -verbose +dither -layers Optimize -resize 900x900\> out-static*.png  GIF:- | gifsicle --colors 128 --delay=5 --loop --optimize=3 --multifile - > "${1}.gif"
    rm out-static*.png
  else
    ffmpeg -i $"1" -s 600x400 -pix_fmt rgb24 -r 10 -f gif - | gifsicle --optimize=3 --delay=3 > "${1}.gif"
  fi
  else
  echo "proper usage: gifify <input_movie.mov>. You DO need to include extension."
  fi
}

# turn that video into webm.
# brew reinstall ffmpeg --with-libvpx
function webmify() {
  ffmpeg -i "$1" -vcodec libvpx -acodec libvorbis -isync -copyts -aq 80 -threads 3 -qmax 30 -y "$2" "${1}.webm"
}

# git commit browser. needs fzf
function log() {
  git log --graph --color=always \
    --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
  fzf --ansi --no-sort --reverse --tiebreak=index --toggle-sort=\` \
    --bind "ctrl-m:execute:
            echo '{}' | grep -o '[a-f0-9]\{7\}' | head -1 |
            xargs -I % sh -c 'git show --color=always % | less -R'"
}

# validate puppet erb
function validate_erb() {
  erb -P -x -T '-' "$1" | ruby -c
}

# ssh loop with 10s timeout
retry_ssh() {
  local args l host sshargs
  args=( "$@" )
  host=${args[${#args[@]}-1]}
  unset args[${#args[@]}-1]
  local sshargs=${args[*]}
  while true; do ssh "${sshargs}" -o ConnectTimeout=5 "${host}" && break; sleep 5; done
}

white-board-cleaner() {
  local path input input_no_ext output
  path=$(dirname "$1")
  input=$(basename "$1")
  input_no_ext=${input%.*}
  output=${2:-$path/cleaned-$input_no_ext.png}
  echo "${output}"
  convert "${path}/${input}" \
    -morphology Convolve DoG:15,100,0 \
    -negate \
    -normalize \
    -blur 0x1 \
    -channel RBG \
    -level 60%,91%,0.1 "${output}";
  echo "${output}"
}

multi-dig() {
  local target dns options
  dns=()
  dns+=('1.1.1.1') # cloudflare
  dns+=('9.9.9.9') # quadnine
  dns+=('208.67.222.222') # opendns
  dns+=('8.8.8.8') # google
  dns+=('216.146.35.35') # dyn
  dns+=('64.6.64.6') # verisign
  dns+=('209.244.0.3') # level3
  target=$1
  shift
  options=( "${@}" )
  for dns in "${dns[@]}"; do
    dig "@${dns}" "${target}" "${options[@]}"
  done
}
